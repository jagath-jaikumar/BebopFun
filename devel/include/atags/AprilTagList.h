// Generated by gencpp from file atags/AprilTagList.msg
// DO NOT EDIT!


#ifndef ATAGS_MESSAGE_APRILTAGLIST_H
#define ATAGS_MESSAGE_APRILTAGLIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <atags/AprilTag.h>

namespace atags
{
template <class ContainerAllocator>
struct AprilTagList_
{
  typedef AprilTagList_<ContainerAllocator> Type;

  AprilTagList_()
    : april_tags()  {
    }
  AprilTagList_(const ContainerAllocator& _alloc)
    : april_tags(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::atags::AprilTag_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::atags::AprilTag_<ContainerAllocator> >::other >  _april_tags_type;
  _april_tags_type april_tags;





  typedef boost::shared_ptr< ::atags::AprilTagList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atags::AprilTagList_<ContainerAllocator> const> ConstPtr;

}; // struct AprilTagList_

typedef ::atags::AprilTagList_<std::allocator<void> > AprilTagList;

typedef boost::shared_ptr< ::atags::AprilTagList > AprilTagListPtr;
typedef boost::shared_ptr< ::atags::AprilTagList const> AprilTagListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::atags::AprilTagList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::atags::AprilTagList_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace atags

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'atags': ['/home/nb950/catkin_ws/src/atags/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::atags::AprilTagList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atags::AprilTagList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atags::AprilTagList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atags::AprilTagList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atags::AprilTagList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atags::AprilTagList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::atags::AprilTagList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "213573b69d7bd9ad75dae95f24eb462e";
  }

  static const char* value(const ::atags::AprilTagList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x213573b69d7bd9adULL;
  static const uint64_t static_value2 = 0x75dae95f24eb462eULL;
};

template<class ContainerAllocator>
struct DataType< ::atags::AprilTagList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "atags/AprilTagList";
  }

  static const char* value(const ::atags::AprilTagList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::atags::AprilTagList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "AprilTag[] april_tags\n\
================================================================================\n\
MSG: atags/AprilTag\n\
uint32 	id\n\
uint32 	hamming_distance\n\
float64 distance\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 yaw\n\
float64 pitch\n\
float64 roll\n\
";
  }

  static const char* value(const ::atags::AprilTagList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::atags::AprilTagList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.april_tags);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AprilTagList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atags::AprilTagList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::atags::AprilTagList_<ContainerAllocator>& v)
  {
    s << indent << "april_tags[]" << std::endl;
    for (size_t i = 0; i < v.april_tags.size(); ++i)
    {
      s << indent << "  april_tags[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::atags::AprilTag_<ContainerAllocator> >::stream(s, indent + "    ", v.april_tags[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ATAGS_MESSAGE_APRILTAGLIST_H
